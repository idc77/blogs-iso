directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Blog implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time
  title: String!
  slug: String!
  description: String
  tagline: String
  ownerID: ID
  featured: Boolean
  posts: [Post!]
  pages: [Page!]
  comments: [Comment!]
  categories: [Category!]
  tags: [Tag!]
  owner: Profile
  authors: [Profile!]
  subscribers: [Profile!]
}
"""
A connection to a list of items.
"""
type BlogConnection {
  """
  A list of edges.
  """
  edges: [BlogEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type BlogEdge {
  """
  The item at the end of the edge.
  """
  node: Blog
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Blog connections
"""
input BlogOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Blogs.
  """
  field: BlogOrderField!
}
"""
Properties by which Blog connections can be ordered.
"""
enum BlogOrderField {
  CREATE_TIME
  UPDATE_TIME
}
"""
BlogWhereInput is used for filtering Blog objects.
Input was generated by ent.
"""
input BlogWhereInput {
  not: BlogWhereInput
  and: [BlogWhereInput!]
  or: [BlogWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeIsNil: Boolean
  updateTimeNotNil: Boolean
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  tagline field predicates
  """
  tagline: String
  taglineNEQ: String
  taglineIn: [String!]
  taglineNotIn: [String!]
  taglineGT: String
  taglineGTE: String
  taglineLT: String
  taglineLTE: String
  taglineContains: String
  taglineHasPrefix: String
  taglineHasSuffix: String
  taglineIsNil: Boolean
  taglineNotNil: Boolean
  taglineEqualFold: String
  taglineContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  featured field predicates
  """
  featured: Boolean
  featuredNEQ: Boolean
  featuredIsNil: Boolean
  featuredNotNil: Boolean
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  pages edge predicates
  """
  hasPages: Boolean
  hasPagesWith: [PageWhereInput!]
  """
  comments edge predicates
  """
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
  """
  categories edge predicates
  """
  hasCategories: Boolean
  hasCategoriesWith: [CategoryWhereInput!]
  """
  tags edge predicates
  """
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [ProfileWhereInput!]
  """
  authors edge predicates
  """
  hasAuthors: Boolean
  hasAuthorsWith: [ProfileWhereInput!]
  """
  subscribers edge predicates
  """
  hasSubscribers: Boolean
  hasSubscribersWith: [ProfileWhereInput!]
}
type Category implements Node {
  id: ID!
  name: String!
  slug: String!
  blogID: ID
  blog: Blog
  posts: [Post!]
}
"""
A connection to a list of items.
"""
type CategoryConnection {
  """
  A list of edges.
  """
  edges: [CategoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CategoryEdge {
  """
  The item at the end of the edge.
  """
  node: Category
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Category connections
"""
input CategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Categories.
  """
  field: CategoryOrderField!
}
"""
Properties by which Category connections can be ordered.
"""
enum CategoryOrderField {
  NAME
}
"""
CategoryWhereInput is used for filtering Category objects.
Input was generated by ent.
"""
input CategoryWhereInput {
  not: CategoryWhereInput
  and: [CategoryWhereInput!]
  or: [CategoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  blog_id field predicates
  """
  blogID: ID
  blogIDNEQ: ID
  blogIDIn: [ID!]
  blogIDNotIn: [ID!]
  blogIDGT: ID
  blogIDGTE: ID
  blogIDLT: ID
  blogIDLTE: ID
  blogIDContains: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIsNil: Boolean
  blogIDNotNil: Boolean
  blogIDEqualFold: ID
  blogIDContainsFold: ID
  """
  blog edge predicates
  """
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
}
type Comment implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time
  postID: ID
  authorID: ID
  blogID: ID
  body: String!
  reactions: [Reaction!]
  post: Post
  author: Profile
  blog: Blog
}
"""
A connection to a list of items.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CommentEdge {
  """
  The item at the end of the edge.
  """
  node: Comment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Comment connections
"""
input CommentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Comments.
  """
  field: CommentOrderField!
}
"""
Properties by which Comment connections can be ordered.
"""
enum CommentOrderField {
  CREATE_TIME
  UPDATE_TIME
}
"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  not: CommentWhereInput
  and: [CommentWhereInput!]
  or: [CommentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeIsNil: Boolean
  updateTimeNotNil: Boolean
  """
  post_id field predicates
  """
  postID: ID
  postIDNEQ: ID
  postIDIn: [ID!]
  postIDNotIn: [ID!]
  postIDGT: ID
  postIDGTE: ID
  postIDLT: ID
  postIDLTE: ID
  postIDContains: ID
  postIDHasPrefix: ID
  postIDHasSuffix: ID
  postIDIsNil: Boolean
  postIDNotNil: Boolean
  postIDEqualFold: ID
  postIDContainsFold: ID
  """
  author_id field predicates
  """
  authorID: ID
  authorIDNEQ: ID
  authorIDIn: [ID!]
  authorIDNotIn: [ID!]
  authorIDGT: ID
  authorIDGTE: ID
  authorIDLT: ID
  authorIDLTE: ID
  authorIDContains: ID
  authorIDHasPrefix: ID
  authorIDHasSuffix: ID
  authorIDIsNil: Boolean
  authorIDNotNil: Boolean
  authorIDEqualFold: ID
  authorIDContainsFold: ID
  """
  blog_id field predicates
  """
  blogID: ID
  blogIDNEQ: ID
  blogIDIn: [ID!]
  blogIDNotIn: [ID!]
  blogIDGT: ID
  blogIDGTE: ID
  blogIDLT: ID
  blogIDLTE: ID
  blogIDContains: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIsNil: Boolean
  blogIDNotNil: Boolean
  blogIDEqualFold: ID
  blogIDContainsFold: ID
  """
  body field predicates
  """
  body: String
  bodyNEQ: String
  bodyIn: [String!]
  bodyNotIn: [String!]
  bodyGT: String
  bodyGTE: String
  bodyLT: String
  bodyLTE: String
  bodyContains: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyEqualFold: String
  bodyContainsFold: String
  """
  reactions edge predicates
  """
  hasReactions: Boolean
  hasReactionsWith: [ReactionWhereInput!]
  """
  post edge predicates
  """
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
  """
  author edge predicates
  """
  hasAuthor: Boolean
  hasAuthorWith: [ProfileWhereInput!]
  """
  blog edge predicates
  """
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]
}
"""
CreateBlogInput is used for create Blog object.
Input was generated by ent.
"""
input CreateBlogInput {
  createTime: Time
  updateTime: Time
  title: String!
  slug: String!
  description: String
  tagline: String
  featured: Boolean
  postIDs: [ID!]
  pageIDs: [ID!]
  commentIDs: [ID!]
  categoryIDs: [ID!]
  tagIDs: [ID!]
  ownerID: ID
  authorIDs: [ID!]
  subscriberIDs: [ID!]
}
"""
CreateCategoryInput is used for create Category object.
Input was generated by ent.
"""
input CreateCategoryInput {
  name: String!
  slug: String!
  blogID: ID
  postIDs: [ID!]
}
"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  createTime: Time
  updateTime: Time
  body: String!
  reactionIDs: [ID!]
  postID: ID
  authorID: ID
  blogID: ID
}
"""
CreatePageInput is used for create Page object.
Input was generated by ent.
"""
input CreatePageInput {
  createTime: Time
  updateTime: Time
  slug: String!
  title: String!
  body: String!
  blogID: ID
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  createTime: Time
  updateTime: Time
  slug: String!
  status: PostStatus
  title: String!
  body: String!
  categoryIDs: [ID!]
  tagIDs: [ID!]
  commentIDs: [ID!]
  reactionIDs: [ID!]
  blogID: ID
  authorID: ID
}
"""
CreateProfileInput is used for create Profile object.
Input was generated by ent.
"""
input CreateProfileInput {
  sub: String!
  name: String!
  avatar: String
  owningIDs: [ID!]
  authoringIDs: [ID!]
  subscribedIDs: [ID!]
  postIDs: [ID!]
  commentIDs: [ID!]
  reactionIDs: [ID!]
}
"""
CreateReactionInput is used for create Reaction object.
Input was generated by ent.
"""
input CreateReactionInput {
  expression: ReactionExpression!
  postID: ID
  commentID: ID
  profileID: ID
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  name: String!
  slug: String!
  postIDs: [ID!]
  blogID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "code.icod.de/dalu/blogs/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
type Page implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time
  slug: String!
  title: String!
  body: String!
  blogID: ID
  blog: Blog
}
"""
A connection to a list of items.
"""
type PageConnection {
  """
  A list of edges.
  """
  edges: [PageEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PageEdge {
  """
  The item at the end of the edge.
  """
  node: Page
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
"""
Ordering options for Page connections
"""
input PageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Pages.
  """
  field: PageOrderField!
}
"""
Properties by which Page connections can be ordered.
"""
enum PageOrderField {
  CREATE_TIME
  UPDATE_TIME
  TITLE
}
"""
PageWhereInput is used for filtering Page objects.
Input was generated by ent.
"""
input PageWhereInput {
  not: PageWhereInput
  and: [PageWhereInput!]
  or: [PageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeIsNil: Boolean
  updateTimeNotNil: Boolean
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  body field predicates
  """
  body: String
  bodyNEQ: String
  bodyIn: [String!]
  bodyNotIn: [String!]
  bodyGT: String
  bodyGTE: String
  bodyLT: String
  bodyLTE: String
  bodyContains: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyEqualFold: String
  bodyContainsFold: String
  """
  blog_id field predicates
  """
  blogID: ID
  blogIDNEQ: ID
  blogIDIn: [ID!]
  blogIDNotIn: [ID!]
  blogIDGT: ID
  blogIDGTE: ID
  blogIDLT: ID
  blogIDLTE: ID
  blogIDContains: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIsNil: Boolean
  blogIDNotNil: Boolean
  blogIDEqualFold: ID
  blogIDContainsFold: ID
  """
  blog edge predicates
  """
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]
}
type Post implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time
  slug: String!
  status: PostStatus!
  title: String!
  body: String!
  blogID: ID
  authorID: ID
  categories: [Category!]
  tags: [Tag!]
  comments: [Comment!]
  reactions: [Reaction!]
  blog: Blog
  author: Profile
}
"""
A connection to a list of items.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Post connections
"""
input PostOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Posts.
  """
  field: PostOrderField!
}
"""
Properties by which Post connections can be ordered.
"""
enum PostOrderField {
  CREATE_TIME
  UPDATE_TIME
  STATUS
  TITLE
}
"""
PostStatus is enum for the field status
"""
enum PostStatus @goModel(model: "code.icod.de/dalu/blogs/ent/post.Status") {
  published
  draft
  private
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeIsNil: Boolean
  updateTimeNotNil: Boolean
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: PostStatus
  statusNEQ: PostStatus
  statusIn: [PostStatus!]
  statusNotIn: [PostStatus!]
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  body field predicates
  """
  body: String
  bodyNEQ: String
  bodyIn: [String!]
  bodyNotIn: [String!]
  bodyGT: String
  bodyGTE: String
  bodyLT: String
  bodyLTE: String
  bodyContains: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyEqualFold: String
  bodyContainsFold: String
  """
  blog_id field predicates
  """
  blogID: ID
  blogIDNEQ: ID
  blogIDIn: [ID!]
  blogIDNotIn: [ID!]
  blogIDGT: ID
  blogIDGTE: ID
  blogIDLT: ID
  blogIDLTE: ID
  blogIDContains: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIsNil: Boolean
  blogIDNotNil: Boolean
  blogIDEqualFold: ID
  blogIDContainsFold: ID
  """
  author_id field predicates
  """
  authorID: ID
  authorIDNEQ: ID
  authorIDIn: [ID!]
  authorIDNotIn: [ID!]
  authorIDGT: ID
  authorIDGTE: ID
  authorIDLT: ID
  authorIDLTE: ID
  authorIDContains: ID
  authorIDHasPrefix: ID
  authorIDHasSuffix: ID
  authorIDIsNil: Boolean
  authorIDNotNil: Boolean
  authorIDEqualFold: ID
  authorIDContainsFold: ID
  """
  categories edge predicates
  """
  hasCategories: Boolean
  hasCategoriesWith: [CategoryWhereInput!]
  """
  tags edge predicates
  """
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """
  comments edge predicates
  """
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
  """
  reactions edge predicates
  """
  hasReactions: Boolean
  hasReactionsWith: [ReactionWhereInput!]
  """
  blog edge predicates
  """
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]
  """
  author edge predicates
  """
  hasAuthor: Boolean
  hasAuthorWith: [ProfileWhereInput!]
}
type Profile implements Node {
  id: ID!
  sub: String!
  name: String!
  avatar: String
  owning: [Blog!]
  authoring: [Blog!]
  subscribed: [Blog!]
  posts: [Post!]
  comments: [Comment!]
  reactions: [Reaction!]
}
"""
A connection to a list of items.
"""
type ProfileConnection {
  """
  A list of edges.
  """
  edges: [ProfileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProfileEdge {
  """
  The item at the end of the edge.
  """
  node: Profile
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Profile connections
"""
input ProfileOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Profiles.
  """
  field: ProfileOrderField!
}
"""
Properties by which Profile connections can be ordered.
"""
enum ProfileOrderField {
  NAME
}
"""
ProfileWhereInput is used for filtering Profile objects.
Input was generated by ent.
"""
input ProfileWhereInput {
  not: ProfileWhereInput
  and: [ProfileWhereInput!]
  or: [ProfileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  sub field predicates
  """
  sub: String
  subNEQ: String
  subIn: [String!]
  subNotIn: [String!]
  subGT: String
  subGTE: String
  subLT: String
  subLTE: String
  subContains: String
  subHasPrefix: String
  subHasSuffix: String
  subEqualFold: String
  subContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  avatar field predicates
  """
  avatar: String
  avatarNEQ: String
  avatarIn: [String!]
  avatarNotIn: [String!]
  avatarGT: String
  avatarGTE: String
  avatarLT: String
  avatarLTE: String
  avatarContains: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarIsNil: Boolean
  avatarNotNil: Boolean
  avatarEqualFold: String
  avatarContainsFold: String
  """
  owning edge predicates
  """
  hasOwning: Boolean
  hasOwningWith: [BlogWhereInput!]
  """
  authoring edge predicates
  """
  hasAuthoring: Boolean
  hasAuthoringWith: [BlogWhereInput!]
  """
  subscribed edge predicates
  """
  hasSubscribed: Boolean
  hasSubscribedWith: [BlogWhereInput!]
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  comments edge predicates
  """
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
  """
  reactions edge predicates
  """
  hasReactions: Boolean
  hasReactionsWith: [ReactionWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  blogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Blogs returned from the connection.
    """
    orderBy: BlogOrder

    """
    Filtering options for Blogs returned from the connection.
    """
    where: BlogWhereInput
  ): BlogConnection!
  categories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Categories returned from the connection.
    """
    orderBy: CategoryOrder

    """
    Filtering options for Categories returned from the connection.
    """
    where: CategoryWhereInput
  ): CategoryConnection!
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Comments returned from the connection.
    """
    orderBy: CommentOrder

    """
    Filtering options for Comments returned from the connection.
    """
    where: CommentWhereInput
  ): CommentConnection!
  pages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Pages returned from the connection.
    """
    orderBy: PageOrder

    """
    Filtering options for Pages returned from the connection.
    """
    where: PageWhereInput
  ): PageConnection!
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: PostOrder

    """
    Filtering options for Posts returned from the connection.
    """
    where: PostWhereInput
  ): PostConnection!
  profiles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Profiles returned from the connection.
    """
    orderBy: ProfileOrder

    """
    Filtering options for Profiles returned from the connection.
    """
    where: ProfileWhereInput
  ): ProfileConnection!
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Reactions returned from the connection.
    """
    orderBy: ReactionOrder

    """
    Filtering options for Reactions returned from the connection.
    """
    where: ReactionWhereInput
  ): ReactionConnection!
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tags returned from the connection.
    """
    orderBy: TagOrder

    """
    Filtering options for Tags returned from the connection.
    """
    where: TagWhereInput
  ): TagConnection!
}
type Reaction implements Node {
  id: ID!
  postID: ID
  commentID: ID
  profileID: ID
  expression: ReactionExpression!
  post: Post
  comment: Comment
  profile: Profile
}
"""
A connection to a list of items.
"""
type ReactionConnection {
  """
  A list of edges.
  """
  edges: [ReactionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ReactionEdge {
  """
  The item at the end of the edge.
  """
  node: Reaction
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ReactionExpression is enum for the field expression
"""
enum ReactionExpression @goModel(model: "code.icod.de/dalu/blogs/ent/reaction.Expression") {
  up
  down
  smile
  laugh
  cry
  surprised
  confused
  angry
}
"""
Ordering options for Reaction connections
"""
input ReactionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Reactions.
  """
  field: ReactionOrderField!
}
"""
Properties by which Reaction connections can be ordered.
"""
enum ReactionOrderField {
  EXPRESSION
}
"""
ReactionWhereInput is used for filtering Reaction objects.
Input was generated by ent.
"""
input ReactionWhereInput {
  not: ReactionWhereInput
  and: [ReactionWhereInput!]
  or: [ReactionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  post_id field predicates
  """
  postID: ID
  postIDNEQ: ID
  postIDIn: [ID!]
  postIDNotIn: [ID!]
  postIDGT: ID
  postIDGTE: ID
  postIDLT: ID
  postIDLTE: ID
  postIDContains: ID
  postIDHasPrefix: ID
  postIDHasSuffix: ID
  postIDIsNil: Boolean
  postIDNotNil: Boolean
  postIDEqualFold: ID
  postIDContainsFold: ID
  """
  comment_id field predicates
  """
  commentID: ID
  commentIDNEQ: ID
  commentIDIn: [ID!]
  commentIDNotIn: [ID!]
  commentIDGT: ID
  commentIDGTE: ID
  commentIDLT: ID
  commentIDLTE: ID
  commentIDContains: ID
  commentIDHasPrefix: ID
  commentIDHasSuffix: ID
  commentIDIsNil: Boolean
  commentIDNotNil: Boolean
  commentIDEqualFold: ID
  commentIDContainsFold: ID
  """
  profile_id field predicates
  """
  profileID: ID
  profileIDNEQ: ID
  profileIDIn: [ID!]
  profileIDNotIn: [ID!]
  profileIDGT: ID
  profileIDGTE: ID
  profileIDLT: ID
  profileIDLTE: ID
  profileIDContains: ID
  profileIDHasPrefix: ID
  profileIDHasSuffix: ID
  profileIDIsNil: Boolean
  profileIDNotNil: Boolean
  profileIDEqualFold: ID
  profileIDContainsFold: ID
  """
  expression field predicates
  """
  expression: ReactionExpression
  expressionNEQ: ReactionExpression
  expressionIn: [ReactionExpression!]
  expressionNotIn: [ReactionExpression!]
  """
  post edge predicates
  """
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
  """
  comment edge predicates
  """
  hasComment: Boolean
  hasCommentWith: [CommentWhereInput!]
  """
  profile edge predicates
  """
  hasProfile: Boolean
  hasProfileWith: [ProfileWhereInput!]
}
type Tag implements Node {
  id: ID!
  name: String!
  slug: String!
  blogID: ID
  posts: [Post!]
  blog: Blog
}
"""
A connection to a list of items.
"""
type TagConnection {
  """
  A list of edges.
  """
  edges: [TagEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TagEdge {
  """
  The item at the end of the edge.
  """
  node: Tag
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Tag connections
"""
input TagOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tags.
  """
  field: TagOrderField!
}
"""
Properties by which Tag connections can be ordered.
"""
enum TagOrderField {
  NAME
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  blog_id field predicates
  """
  blogID: ID
  blogIDNEQ: ID
  blogIDIn: [ID!]
  blogIDNotIn: [ID!]
  blogIDGT: ID
  blogIDGTE: ID
  blogIDLT: ID
  blogIDLTE: ID
  blogIDContains: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIsNil: Boolean
  blogIDNotNil: Boolean
  blogIDEqualFold: ID
  blogIDContainsFold: ID
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  blog edge predicates
  """
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateBlogInput is used for update Blog object.
Input was generated by ent.
"""
input UpdateBlogInput {
  updateTime: Time
  clearUpdateTime: Boolean
  title: String
  slug: String
  description: String
  clearDescription: Boolean
  tagline: String
  clearTagline: Boolean
  featured: Boolean
  clearFeatured: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  addPageIDs: [ID!]
  removePageIDs: [ID!]
  clearPages: Boolean
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearComments: Boolean
  addCategoryIDs: [ID!]
  removeCategoryIDs: [ID!]
  clearCategories: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
  ownerID: ID
  clearOwner: Boolean
  addAuthorIDs: [ID!]
  removeAuthorIDs: [ID!]
  clearAuthors: Boolean
  addSubscriberIDs: [ID!]
  removeSubscriberIDs: [ID!]
  clearSubscribers: Boolean
}
"""
UpdateCategoryInput is used for update Category object.
Input was generated by ent.
"""
input UpdateCategoryInput {
  name: String
  slug: String
  blogID: ID
  clearBlog: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
}
"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  updateTime: Time
  clearUpdateTime: Boolean
  body: String
  addReactionIDs: [ID!]
  removeReactionIDs: [ID!]
  clearReactions: Boolean
  postID: ID
  clearPost: Boolean
  authorID: ID
  clearAuthor: Boolean
  blogID: ID
  clearBlog: Boolean
}
"""
UpdatePageInput is used for update Page object.
Input was generated by ent.
"""
input UpdatePageInput {
  updateTime: Time
  clearUpdateTime: Boolean
  slug: String
  title: String
  body: String
  blogID: ID
  clearBlog: Boolean
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  updateTime: Time
  clearUpdateTime: Boolean
  slug: String
  status: PostStatus
  title: String
  body: String
  addCategoryIDs: [ID!]
  removeCategoryIDs: [ID!]
  clearCategories: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearComments: Boolean
  addReactionIDs: [ID!]
  removeReactionIDs: [ID!]
  clearReactions: Boolean
  blogID: ID
  clearBlog: Boolean
}
"""
UpdateProfileInput is used for update Profile object.
Input was generated by ent.
"""
input UpdateProfileInput {
  sub: String
  name: String
  avatar: String
  clearAvatar: Boolean
  addOwningIDs: [ID!]
  removeOwningIDs: [ID!]
  clearOwning: Boolean
  addAuthoringIDs: [ID!]
  removeAuthoringIDs: [ID!]
  clearAuthoring: Boolean
  addSubscribedIDs: [ID!]
  removeSubscribedIDs: [ID!]
  clearSubscribed: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearComments: Boolean
  addReactionIDs: [ID!]
  removeReactionIDs: [ID!]
  clearReactions: Boolean
}
"""
UpdateReactionInput is used for update Reaction object.
Input was generated by ent.
"""
input UpdateReactionInput {
  expression: ReactionExpression
  postID: ID
  clearPost: Boolean
  commentID: ID
  clearComment: Boolean
  profileID: ID
  clearProfile: Boolean
}
"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  name: String
  slug: String
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  blogID: ID
  clearBlog: Boolean
}
type Mutation {
    # The input and the output are types generated by Ent.
    createBlog(input: CreateBlogInput!): Blog
    updateBlog(id:ID!, input: UpdateBlogInput!): Blog
    deleteBlog(id:ID!): Boolean

    createCategory(input: CreateCategoryInput!): Category
    updateCategory(id:ID!, input: UpdateCategoryInput!): Category
    deleteCategory(id:ID!): Boolean

    createComment(input: CreateCommentInput!): Comment
    updateComment(id:ID!, input: UpdateCommentInput!): Comment
    deleteComment(id:ID!): Boolean

    createPage(input: CreatePageInput!): Page
    updatePage(id:ID!, input: UpdatePageInput!): Page
    deletePage(id:ID!): Boolean
    
    createPost(input: CreatePostInput!): Post
    updatePost(id:ID!, input: UpdatePostInput!): Post
    deletePost(id:ID!): Boolean
    
    createProfile(input: CreateProfileInput!): Profile
    updateProfile(id:ID!, input: UpdateProfileInput!): Profile
    deleteProfile(id:ID!): Boolean
    
    createReaction(input: CreateReactionInput!): Reaction
    updateReaction(id:ID!, input: UpdateReactionInput!): Reaction
    deleteReaction(id:ID!): Boolean
    
    createTag(input: CreateTagInput!): Tag
    updateTag(id:ID!, input: UpdateTagInput!): Tag
    deleteTag(id:ID!): Boolean
}
